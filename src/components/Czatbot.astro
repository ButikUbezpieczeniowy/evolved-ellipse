// Kod JS wewnątrz <script> w pliku src/components/Czatbot.astro

    const czatInput = document.getElementById('czat-input');
    const czatHistoria = document.getElementById('czat-historia');
    
    // Funkcja do dodawania wiadomości do interfejsu
    function addMessage(sender, text) {
        const messageElement = document.createElement('div');
        messageElement.className = `p-2 rounded-lg text-sm max-w-[80%] ${
            sender === 'user' ? 'ml-auto bg-blue-100 text-right' : 'mr-auto bg-gray-100 text-left'
        }`;
        messageElement.textContent = text;
        czatHistoria.appendChild(messageElement);
        czatHistoria.scrollTop = czatHistoria.scrollHeight; // Przewiń na dół
    }

    // Funkcja obsługująca wysyłkę wiadomości do Vercel Function
    async function sendMessage() {
        const message = czatInput.value.trim();
        if (message === "") return;

        addMessage('user', message);
        czatInput.value = '';
        czatInput.disabled = true; // Zablokuj input na czas oczekiwania
        addMessage('system', '🤖 Piszę odpowiedź...'); // Placeholder odpowiedzi

        // 1. Tworzenie historii wiadomości (dla kontekstu konwersacji)
        // Musisz uwzględnić poprzednie wiadomości z interfejsu (lub state managera)
        // Dla uproszczenia w tym przykładzie wysyłamy tylko nową wiadomość:
        const messageHistory = [{ role: "user", content: message }]; 

        try {
            const response = await fetch('/api/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ messageHistory }),
            });

            const data = await response.json();
            
            // Usuwamy placeholder i dodajemy faktyczną odpowiedź
            czatHistoria.lastChild.remove(); 
            
            if (response.ok) {
                addMessage('system', data.response);
            } else {
                addMessage('system', `❌ Błąd: ${data.error || 'Nieznany błąd AI.'}`);
            }

        } catch (error) {
            console.error("Błąd wysyłki wiadomości:", error);
            czatHistoria.lastChild.remove();
            addMessage('system', '❌ Błąd połączenia sieciowego. Sprawdź konsolę.');
        } finally {
            czatInput.disabled = false;
            czatInput.focus();
        }
    }

    // Dodanie event listenera do inputu (po naciśnięciu Enter)
    czatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });

    // Utrzymujemy dotychczasową logikę otwierania/zamykania UI:
    // (Kod otwierania/zamykania z poprzedniej wiadomości pozostaje bez zmian)